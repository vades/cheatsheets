{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Cheat Sheets for Web Developers","text":"<p>Simplify your coding journey with our handy cheat sheets, offering a wealth of knowledge and practical insights for web developers striving for excellence.</p> <p>{{ blog_content  cheat-sheets }}</p>"},{"location":"about/","title":"About","text":"<p>Greetings! My name is Martin Vach, and I am a seasoned full stack web developer with a remarkable 20 years of experience in the industry. Throughout my illustrious career, I've been fortunate enough to tackle an array of projects, spanning from nimble startups to sprawling enterprise solutions.</p> <p>During my extensive journey as a web developer, I've meticulously gathered and curated an extensive library of cheat sheets dedicated to web development. Fuelled by my own encounters with challenges and experiences, this collection stands as a treasure trove of invaluable resources. Touching upon an extensive range of topics and technologies, these cheat sheets have been carefully crafted to empower developers at all levels.</p> <p>The cheat sheets I've assembled are the culmination of relentless research and countless hours of trial and error. Refined over the years, they are now concise, accurate, and remarkably user-friendly. Serving as invaluable quick references, these cheat sheets equip fellow developers with shortcuts, best practices, and code snippets that supercharge their development process, enabling heightened productivity and efficiency.</p>"},{"location":"cheat-sheets/","title":"Cheat Sheets","text":"<p>{{ blog_content  cheat-sheets }}</p>"},{"location":"tags/","title":"Tags","text":"<p>{{ tag_content }}</p>"},{"location":"cheat-sheets/Angular-CLI-Cheat-Sheet/","title":"Angular CLI Cheat Sheet","text":"<p>This cheat sheet provides a list of frequently used Angular CLI commands along with a short description and an example for each command.</p> Command Description Example <code>ng new &lt;project-name&gt;</code> Creates a new Angular project <code>ng new my-app</code> <code>ng generate component &lt;name&gt;</code> Generates a new component <code>ng generate component my-component</code> <code>ng serve</code> Starts the development server <code>ng serve</code> <code>ng build</code> Builds the Angular application for production <code>ng build --prod</code> <code>ng test</code> Runs unit tests <code>ng test</code> <code>ng lint</code> Lints the project's code <code>ng lint</code> <code>ng add &lt;package&gt;</code> Adds a package to the project <code>ng add @angular/material</code> <code>ng update</code> Updates the dependencies of the project <code>ng update @angular/cli</code> <code>ng generate module &lt;name&gt;</code> Generates a new module <code>ng generate module my-module</code> <code>ng generate service &lt;name&gt;</code> Generates a new service <code>ng generate service my-service</code> <code>ng generate directive &lt;name&gt;</code> Generates a new directive <code>ng generate directive my-directive</code> <code>ng generate pipe &lt;name&gt;</code> Generates a new pipe <code>ng generate pipe my-pipe</code> <code>ng generate class &lt;name&gt;</code> Generates a new class <code>ng generate class my-class</code> <code>ng generate interface &lt;name&gt;</code> Generates a new interface <code>ng generate interface my-interface</code> <code>ng generate enum &lt;name&gt;</code> Generates a new enum <code>ng generate enum my-enum</code> <code>ng generate guard &lt;name&gt;</code> Generates a new route guard <code>ng generate guard my-guard</code> <code>ng generate resolver &lt;name&gt;</code> Generates a new route resolver <code>ng generate resolver my-resolver</code> <code>ng generate interceptor &lt;name&gt;</code> Generates a new HTTP interceptor <code>ng generate interceptor my-interceptor</code> <code>ng generate component &lt;name&gt; --route</code> Generates a new component and creates a routing configuration <code>ng generate component my-component --route</code> <code>ng generate module &lt;name&gt; --routing</code> Generates a new module with a routing configuration <code>ng generate module my-module --routing</code> <code>ng build --watch</code> Builds and watches for changes in files <code>ng build --watch</code> <code>ng serve --open</code> Starts the development server and opens the browser <code>ng serve --open</code> <p>Remember to run these commands from the command line in the root directory of your Angular project.</p>","tags":["angular","cheat sheet"]},{"location":"cheat-sheets/Docker-Cheat-Sheet/","title":"Docker Cheat Sheet","text":"<p>This cheat sheet should help you navigate and execute common Docker operations efficiently.</p> Command Description Example <code>docker run</code> Creates and starts a new container <code>docker run -it ubuntu:latest</code> <code>docker ps</code> Lists all running containers <code>docker ps</code> <code>docker images</code> Lists all available images <code>docker images</code> <code>docker pull</code> Pulls an image from a registry <code>docker pull nginx:latest</code> <code>docker build</code> Builds an image from a Dockerfile <code>docker build -t myimage .</code> <code>docker start</code> Starts one or more stopped containers <code>docker start container_name</code> <code>docker stop</code> Stops one or more running containers <code>docker stop container_name</code> <code>docker restart</code> Restarts a running container <code>docker restart container_name</code> <code>docker exec</code> Runs a command inside a running container <code>docker exec -it container_name bash</code> <code>docker rm</code> Removes one or more containers <code>docker rm container_name</code> <code>docker rmi</code> Removes one or more images <code>docker rmi image_name</code> <code>docker logs</code> Displays the logs of a container <code>docker logs container_name</code> <code>docker cp</code> Copies files/folders between a container and the host <code>docker cp container_name:/path/to/file .</code> <code>docker network</code> Manages Docker networks <code>docker network create mynetwork</code> <code>docker volume</code> Manages Docker volumes <code>docker volume create myvolume</code> <code>docker-compose up</code> Starts containers defined in a Compose file <code>docker-compose up -d</code> <p>Remember to replace <code>container_name</code>, <code>image_name</code>, and other placeholders with actual names relevant to your setup.</p>","tags":["docker","cheat sheet"]},{"location":"cheat-sheets/Git-Cheat-Sheet/","title":"Git Cheat Sheet","text":"<p>This cheat sheet provides a list of 30 commonly used Git commands along with their short descriptions and examples.</p> Command Description Example <code>git init</code> Initializes a new Git repository <code>git init</code> <code>git clone</code> Creates a local copy of a remote repository <code>git clone https://github.com/user/repo.git</code> <code>git add</code> Adds changes to the staging area <code>git add file.txt</code> <code>git commit</code> Records changes to the repository <code>git commit -m \"Added new feature\"</code> <code>git status</code> Shows the status of files in the repository <code>git status</code> <code>git push</code> Pushes local changes to a remote repository <code>git push origin master</code> <code>git pull</code> Fetches and merges changes from a remote repository <code>git pull origin master</code> <code>git branch</code> Lists all branches in the repository <code>git branch</code> <code>git checkout</code> Switches to a different branch <code>git checkout new-feature</code> <code>git merge</code> Merges changes from one branch into another <code>git merge feature-branch</code> <code>git remote</code> Manages remote repositories <code>git remote add origin https://github.com/user/repo.git</code> <code>git log</code> Displays the commit history <code>git log</code> <code>git diff</code> Shows the differences between commits, branches, etc. <code>git diff HEAD~1 HEAD</code> <code>git reset</code> Resets the repository to a previous commit <code>git reset HEAD~1</code> <code>git stash</code> Temporarily saves changes that are not ready to be committed <code>git stash</code> <code>git tag</code> Creates, lists, or deletes tags <code>git tag v1.0.0</code> <code>git fetch</code> Downloads objects and references from a remote repository <code>git fetch origin</code> <code>git remote -v</code> Shows the URLs of remote repositories <code>git remote -v</code> <code>git revert</code> Creates a new commit that undoes a previous commit <code>git revert HEAD</code> <code>git rm</code> Removes files from the working directory and the repository <code>git rm file.txt</code> <code>git show</code> Displays information about a commit <code>git show abcdef123</code> <code>git blame</code> Shows who last modified each line of a file <code>git blame file.txt</code> <code>git cherry-pick</code> Applies the changes of a specific commit to the current branch <code>git cherry-pick abcdef123</code> <code>git config</code> Sets or displays Git configuration variables <code>git config --global user.name \"John Doe\"</code> <code>git remote rm</code> Removes a remote repository from the list of remotes <code>git remote rm origin</code> <code>git rebase</code> Applies commits from one branch onto another <code>git rebase main</code> <code>git show-branch</code> Displays the branches and their commits <code>git show-branch</code> <code>git grep</code> Searches for a pattern in files and commits <code>git grep \"hello\"</code> <code>git checkout -b</code> Creates a new branch and switches to it <code>git checkout -b feature</code> <code>git clean</code> Removes untracked files from the working directory <code>git clean -n</code> <code>git bisect</code> Finds the commit that introduced a bug using binary search <code>git bisect start</code>","tags":["git","cheat sheet"]},{"location":"cheat-sheets/Laravel-Cheat-Sheet/","title":"Laravel Artisan Command Cheat Sheet","text":"<p>This cheat sheet provides a list of frequently used Laravel Artisan commands along with their short descriptions and examples.</p> Command Short Description Example <code>php artisan serve</code> Starts the Laravel development server. <code>php artisan serve</code> <code>php artisan migrate</code> Runs all pending database migrations. <code>php artisan migrate</code> <code>php artisan make:model</code> Generates a new Eloquent model class. <code>php artisan make:model User</code> <code>php artisan make:controller</code> Generates a new controller class. <code>php artisan make:controller UserController</code> <code>php artisan make:middleware</code> Generates a new middleware class. <code>php artisan make:middleware AuthMiddleware</code> <code>php artisan make:migration</code> Generates a new database migration file. <code>php artisan make:migration create_users_table</code> <code>php artisan make:seeder</code> Generates a new database seeder class. <code>php artisan make:seeder UsersTableSeeder</code> <code>php artisan tinker</code> Opens an interactive shell for Laravel. <code>php artisan tinker</code> <code>php artisan route:list</code> Lists all registered routes. <code>php artisan route:list</code> <code>php artisan cache:clear</code> Clears the application cache. <code>php artisan cache:clear</code> <code>php artisan config:cache</code> Caches the configuration files. <code>php artisan config:cache</code> <code>php artisan queue:work</code> Processes jobs on the queue. <code>php artisan queue:work</code> <code>php artisan schedule:run</code> Runs the scheduled commands. <code>php artisan schedule:run</code> <code>php artisan optimize</code> Optimizes the application for better performance. <code>php artisan optimize</code> <code>php artisan key:generate</code> Generates a new application key. <code>php artisan key:generate</code> <p>Note: Make sure to run these commands from the root directory of your Laravel project.</p>","tags":["laravel","cheat sheet"]},{"location":"cheat-sheets/NX-Cheat-Sheet/","title":"NX Commands Cheat Sheet","text":"<p>This cheat sheet covers a range of common NX commands used in an Angular workspace, allowing you to efficiently perform various tasks such as building, serving, testing, generating code, linting, and managing the workspace.</p> Command Short Description Example <code>nx build</code> Build an Angular workspace <code>nx build my-app</code> <code>nx serve</code> Serve an Angular application <code>nx serve my-app</code> <code>nx test</code> Run tests for an Angular project <code>nx test my-app</code> <code>nx generate</code> Generate code using schematics <code>nx generate component my-component</code> <code>nx lint</code> Lint the codebase <code>nx lint my-app</code> <code>nx run</code> Execute a project task <code>nx run my-app:task</code> <code>nx dep-graph</code> Generate a dependency graph <code>nx dep-graph</code> <code>nx list</code> List available projects or tasks <code>nx list</code> <code>nx affected</code> Run tasks for affected projects <code>nx affected:build</code> <code>nx workspace</code> Manage the Angular workspace <code>nx workspace schematic my-schematic</code> <p>Note: Replace <code>my-app</code>, <code>my-component</code>, <code>task</code>, <code>my-schematic</code>, etc. with your project-specific names.</p>","tags":["angular","nx","cheat sheet"]},{"location":"cheat-sheets/RxJs-Cheat-Sheet/","title":"RxJS Most Used Operators","text":"<p>This cheat sheet provides a quick reference for most used RxJS operators. However, RxJS offers many more operators with various functionalities that can be explored in the official documentation.</p> Operator Description Example <code>map</code> Applies a transformation to each emitted value <code>source$.pipe(map(value =&gt; value * 2))</code> <code>filter</code> Filters out values based on a condition <code>source$.pipe(filter(value =&gt; value &gt; 0))</code> <code>mergeMap</code> Maps each value to an Observable, then flattens the inner Observables <code>source$.pipe(mergeMap(value =&gt; fetchData(value)))</code> <code>concatMap</code> Maps each value to an Observable, and concatenates the results in order <code>source$.pipe(concatMap(value =&gt; fetchData(value)))</code> <code>switchMap</code> Maps each value to an Observable, discarding previous inner Observables <code>source$.pipe(switchMap(value =&gt; fetchData(value)))</code> <code>debounceTime</code> Emits a value after a specified duration of silence <code>source$.pipe(debounceTime(300))</code> <code>distinctUntilChanged</code> Emits values only if they are different from the previous value <code>source$.pipe(distinctUntilChanged())</code> <code>take</code> Emits only the first n values from the source Observable <code>source$.pipe(take(5))</code> <code>takeUntil</code> Emits values until a second Observable emits a value <code>source$.pipe(takeUntil(stop$))</code> <code>combineLatest</code> Combines multiple Observables into one, emitting an array of the latest values <code>combineLatest(source1$, source2$).subscribe(([value1, value2]) =&gt; console.log(value1, value2))</code> <code>zip</code> Combines multiple Observables into one, emitting an array of corresponding values <code>zip(source1$, source2$).subscribe(([value1, value2]) =&gt; console.log(value1, value2))</code> <code>retry</code> Re-subscribes to the source Observable a specified number of times after an error <code>source$.pipe(retry(3))</code> <code>catchError</code> Catches errors and replaces them with a fallback Observable or value <code>source$.pipe(catchError(error =&gt; of(fallbackValue)))</code> <code>tap</code> Performs a side effect without modifying the emitted values <code>source$.pipe(tap(value =&gt; console.log(value)))</code> <code>startWith</code> Emits a specified value before the source Observable starts emitting <code>source$.pipe(startWith(initialValue))</code> <code>pluck</code> Extracts a specified nested property from each emitted object <code>source$.pipe(pluck('name'))</code> <code>finalize</code> Performs a specified action when the source Observable completes or errors <code>source$.pipe(finalize(() =&gt; console.log('Completed')))</code> <code>skip</code> Skips the first n values emitted by the source Observable <code>source$.pipe(skip(3))</code> <code>bufferTime</code> Collects values emitted within a specified time window into an array <code>source$.pipe(bufferTime(1000))</code> <code>share</code> Shares a single subscription among multiple subscribers <code>source$.pipe(share())</code>","tags":["rxjs","cheat sheet"]},{"location":"cheat-sheets/Top-30-AWS-services/","title":"Top 30 AWS services","text":"<p>With hundreds of services available, it can be difficult to know which to choose. This list of the 30 most used AWS services is the perfect guide for managers and developers who need to save time. Each of the services is linked to more detailed information, so you can quickly find the best services to use in your project.</p> Service Name Description Amazon EC2 Web service that provides secure, resizable compute capacity in the cloud Amazon S3 Object storage with a simple web service interface to store and retrieve any amount of data from anywhere Amazon RDS Relational database service that makes it easy to set up, operate, and scale a relational database in the cloud Amazon ECS Container management service that allows you to run, manage, and scale containerized applications Amazon Lambda Compute service that runs code in response to events and automatically manages the computing resources needed Amazon EMR Big data platform that enables you to process vast amounts of data quickly and cost-effectively Amazon SNS Pub/sub messaging and mobile notifications service that decouples microservices, distributed systems, and serverless applications Amazon SQS Distributed queue messaging service for storing messages in transit between computers Amazon VPC Secure, isolated cloud-based virtual private network (VPN) for your AWS resources and applications AWS CloudFormation Infrastructure as code service that allows you to provision and manage AWS resources in a safe, repeatable manner AWS CloudTrail Audit logging service that records AWS API calls and delivers log files to you for security analysis and compliance auditing AWS CloudWatch Monitoring service that collects and tracks metrics, collects and monitors log files, and sets alarms AWS CodeBuild DevOps service that compiles source code, runs tests, and produces software packages ready for deployment AWS CodeDeploy Automated deployment service that helps you launch applications quickly and securely on AWS AWS Config Compliance and security service that continuously monitors and records AWS resource configurations AWS Direct Connect Dedicated network connection from your premises to AWS that allows you to securely access AWS resources AWS Elastic Beanstalk Platform for deploying and scaling web applications and services developed with Java, .NET, PHP, Node.js, Python, and Ruby AWS IAM Web service that helps you securely control access to AWS resources for your users AWS KMS Encryption and key management service designed to help protect your data and applications AWS Organizations Service that enables you to centrally manage and govern your AWS resources AWS Shield DDoS protection service that safeguards web applications running on AWS AWS Step Functions Workflow orchestration service that enables you to easily coordinate the components of complex applications AWS WAF Web application firewall service that helps protect your web applications from common web exploits AWS X-Ray Distributed tracing service that helps you analyze and debug distributed applications AWS Glue Serverless ETL service for moving data between data sources and transforming it for analytics AWS Machine Learning Service that makes it easy for developers to create ML models and deploy them into production AWS Fargate Serverless container platform that allows you to focus on building applications, not managing the underlying infrastructure AWS AppStream Streaming service that allows you to securely stream desktop applications to a variety of devices AWS Backup Fully-managed backup service that simplifies and automates the process of backing up data to the cloud Amazon Athena Interactive query service that makes it easy to analyze data in Amazon S3 using standard SQL Amazon SageMaker Platform for building, training, and deploying ML models at scale","tags":["rxjs","cheat sheet"]}]}